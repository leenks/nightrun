var scmult=function(t,o){return[t*o[0],t*o[1]]},vcadd=function(t,o){return[t[0]+o[0],t[1]+o[1]]},minus=function(t,o){return[t[0]-o[0],t[1]-o[1]]},dot=function(t,o){return t[0]*o[0]+t[1]*o[1]},wedge=function(t,o){return t[0]*o[1]-t[1]*o[0]},apply=function(t,o){return vcadd(scmult(o[0],t[0]),scmult(o[1],t[1]))},mult=function(t,o){return[apply(t,o[0]),apply(t,o[1])]};function Transform(t,o){this.A=t,this.b=o}Transform.prototype.css=function(){var t=this.A,o=this.b;return"matrix("+t[0][0]+","+t[0][1]+","+t[1][0]+","+t[1][1]+","+o[0]+","+o[1]+")"};var cascade=function(t,o){return new Transform(mult(t.A,o.A),vcadd(apply(t.A,o.b),t.b))},rotate=function(t,o){return[[t,o],[-o,t]]},rotscale=function(t,o){var n=dot(t,t),e=dot(t,o),r=wedge(t,o);return rotate(e/n,r/n)},justscale=function(t,o){var n=Math.sqrt(dot(t,t)),e=Math.sqrt(dot(o,o));return rotate(e/n,0)},zoom=function(t,o,n){var e=minus(t[1],t[0]),r=minus(o[1],o[0]),i=n?rotscale(e,r):justscale(e,r),a=apply(i,t[0]);return new Transform(i,minus(o[0],a))},avgVector=function(t,o,n){var e=scmult(1-n,t),r=scmult(n,o);return vcadd(e,r)},avgMatrix=function(t,o,n){return[avgVector(t[0],o[0],n),avgVector(t[1],o[1],n)]};Transform.avg=function(t,o,n){return new Transform(avgMatrix(t.A,o.A,n),avgVector(t.b,o.b,n))};var identity=new Transform([[1,0],[0,1]],[0,0]),defaults=function(t,o){return null==t?o:t},default_config=function(t,o){var n=defaults(t,{});for(k in o)n[k]=defaults(n[k],o[k]);return n};function Zoom(i,t,o){this.elem=i,this.zooming=!1,this.activeZoom=identity,this.resultantZoom=identity,this.srcCoords=[0,0];var r=this,e=!1;this.config=default_config(t,{pan:!1,rotate:!0}),this.wnd=o||window,i.style["transform-origin"]="0 0";function a(t){return 1<t.length?function(t){var o=i.offsetLeft,n=i.offsetTop;return[[t[0].pageX-o,t[0].pageY-n],[t[1].pageX-o,t[1].pageY-n]]}(t):function(t){var o=i.offsetLeft,n=i.offsetTop,e=t[0].pageX-o,r=t[0].pageY-n;return[[e,r],[1+e,1+r]]}(t)}i.parentNode.addEventListener("touchstart",function(t){var o=t.touches;if(!o)return!1;var n=!1;2===o.length?r.zooming=!0:1===o.length&&(e?n=!(e=!1):(e=!0,r.wnd.setTimeout(function(){e=!1},300),r.config.pan&&(r.zooming=!0))),(r.zooming||e||n)&&t.preventDefault(),r.zooming&&(r.srcCoords=a(o)),n&&r.reset()}),i.parentNode.addEventListener("touchmove",function(t){var o=t.touches;if(!o)return!1;if(!r.zooming)return!1;t.preventDefault();var n=a(o),e=zoom(r.srcCoords,n,r.config.rotate);r.previewZoom(e)}),i.parentNode.addEventListener("touchend",function(t){r.zooming&&(r.zooming=!1,r.finalize(),t.preventDefault())})}Zoom.prototype.previewZoom=function(t){this.resultantZoom=cascade(t,this.activeZoom),this.repaint()},Zoom.prototype.setZoom=function(t){this.resultantZoom=t,this.finalize(),this.repaint()},Zoom.prototype.finalize=function(){this.activeZoom=this.resultantZoom},Zoom.prototype.repaint=function(){this.elem.style.transform=this.resultantZoom.css()},Zoom.prototype.reset=function(){if(this.wnd.requestAnimationFrame){var n=this.activeZoom,e=null,r=this,i=function(t){e||(e=t);var o=(t-e)/100;1<=o?r.setZoom(identity):(r.setZoom(Transform.avg(n,identity,o)),r.wnd.requestAnimationFrame(i))};this.wnd.requestAnimationFrame(i)}else this.setZoom(identity)},Zoom.prototype.reset=Zoom.prototype.reset,"undefined"==typeof exports?window.Zoom=Zoom:exports.Zoom=Zoom;
var tns=function(){Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var t=window,Ci=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16)},e=window,wi=e.cancelAnimationFrame||e.mozCancelAnimationFrame||function(t){clearTimeout(t)};function Mi(){for(var t,e,n,i=arguments[0]||{},r=1,a=arguments.length;r<a;r++)if(null!==(t=arguments[r]))for(e in t)i!==(n=t[e])&&void 0!==n&&(i[e]=n);return i}function Ti(t){return 0<=["true","false"].indexOf(t)?JSON.parse(t):t}function Ei(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function Ai(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var n=document.documentElement;function Ni(t){var e="";return t.fake&&(e=n.style.overflow,t.style.background="",t.style.overflow=n.style.overflow="hidden",n.appendChild(t)),e}function Li(t,e){t.fake&&(t.remove(),n.style.overflow=e,n.offsetHeight)}function Bi(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function Si(t){return("insertRule"in t?t.cssRules:t.rules).length}function Oi(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i)}var i="classList"in document.createElement("_"),Di=i?function(t,e){return t.classList.contains(e)}:function(t,e){return 0<=t.className.indexOf(e)},Hi=i?function(t,e){Di(t,e)||t.classList.add(e)}:function(t,e){Di(t,e)||(t.className+=" "+e)},ki=i?function(t,e){Di(t,e)&&t.classList.remove(e)}:function(t,e){Di(t,e)&&(t.className=t.className.replace(e,""))};function Ri(t,e){return t.hasAttribute(e)}function Ii(t,e){return t.getAttribute(e)}function a(t){return void 0!==t.item}function Pi(t,e){if(t=a(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function zi(t,e){t=a(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var r=n;r--;)t[i].removeAttribute(e[r])}function Wi(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function Fi(t,e){"none"!==t.style.display&&(t.style.display="none")}function qi(t,e){"none"===t.style.display&&(t.style.display="")}function ji(t){return"none"!==window.getComputedStyle(t).display}function Vi(e){if("string"==typeof e){var n=[e],i=e.charAt(0).toUpperCase()+e.substr(1);["Webkit","Moz","ms","O"].forEach(function(t){"ms"===t&&"transform"!==e||n.push(t+i)}),e=n}for(var t=document.createElement("fakeelement"),r=(e.length,0);r<e.length;r++){var a=e[r];if(void 0!==t.style[a])return a}return!1}function Gi(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var r=!1;try{var o=Object.defineProperty({},"passive",{get:function(){r=!0}});window.addEventListener("test",null,o)}catch(t){}var u=!!r&&{passive:!0};function Qi(t,e,n){for(var i in e){var r=0<=["touchstart","touchmove"].indexOf(i)&&!n&&u;t.addEventListener(i,e[i],r)}}function Xi(t,e){for(var n in e){var i=0<=["touchstart","touchmove"].indexOf(n)&&u;t.removeEventListener(n,e[n],i)}}function Yi(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(e,n){n.type=e,this.topics[e]&&this.topics[e].forEach(function(t){t(n,e)})}}}var Ki=function(B){B=Mi({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},B||{});var S=document,h=window,r={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},e={},n=B.useLocalStorage;if(n){var t=navigator.userAgent,i=new Date;try{(e=h.localStorage)?(e.setItem(i,i),n=e.getItem(i)==i,e.removeItem(i)):n=!1,n||(e={})}catch(t){n=!1}n&&(e.tnsApp&&e.tnsApp!==t&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(t){e.removeItem(t)}),localStorage.tnsApp=t)}var y=e.tC?Ti(e.tC):Ei(e,"tC",function(){var t=document,e=Ai(),n=Ni(e),i=t.createElement("div"),r=!1;e.appendChild(i);try{for(var a,o="(10px * 10)",u=["calc"+o,"-moz-calc"+o,"-webkit-calc"+o],l=0;l<3;l++)if(a=u[l],i.style.width=a,100===i.offsetWidth){r=a.replace(o,"");break}}catch(t){}return e.fake?Li(e,n):i.remove(),r}(),n),g=e.tPL?Ti(e.tPL):Ei(e,"tPL",function(){var t,e=document,n=Ai(),i=Ni(n),r=e.createElement("div"),a=e.createElement("div"),o="";r.className="tns-t-subp2",a.className="tns-t-ct";for(var u=0;u<70;u++)o+="<div></div>";return a.innerHTML=o,r.appendChild(a),n.appendChild(r),t=Math.abs(r.getBoundingClientRect().left-a.children[67].getBoundingClientRect().left)<2,n.fake?Li(n,i):r.remove(),t}(),n),O=e.tMQ?Ti(e.tMQ):Ei(e,"tMQ",function(){var t,e=document,n=Ai(),i=Ni(n),r=e.createElement("div"),a=e.createElement("style"),o="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return a.type="text/css",r.className="tns-mq-test",n.appendChild(a),n.appendChild(r),a.styleSheet?a.styleSheet.cssText=o:a.appendChild(e.createTextNode(o)),t=window.getComputedStyle?window.getComputedStyle(r).position:r.currentStyle.position,n.fake?Li(n,i):r.remove(),"absolute"===t}(),n),a=e.tTf?Ti(e.tTf):Ei(e,"tTf",Vi("transform"),n),o=e.t3D?Ti(e.t3D):Ei(e,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=Ai(),r=Ni(i),a=n.createElement("p"),o=9<t.length?"-"+t.slice(0,-9).toLowerCase()+"-":"";return o+="transform",i.insertBefore(a,null),a.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(a).getPropertyValue(o),i.fake?Li(i,r):a.remove(),void 0!==e&&0<e.length&&"none"!==e}(a),n),x=e.tTDu?Ti(e.tTDu):Ei(e,"tTDu",Vi("transitionDuration"),n),u=e.tTDe?Ti(e.tTDe):Ei(e,"tTDe",Vi("transitionDelay"),n),b=e.tADu?Ti(e.tADu):Ei(e,"tADu",Vi("animationDuration"),n),l=e.tADe?Ti(e.tADe):Ei(e,"tADe",Vi("animationDelay"),n),s=e.tTE?Ti(e.tTE):Ei(e,"tTE",Gi(x,"Transition"),n),c=e.tAE?Ti(e.tAE):Ei(e,"tAE",Gi(b,"Animation"),n),f=h.console&&"function"==typeof h.console.warn,d=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],v={};if(d.forEach(function(t){if("string"==typeof B[t]){var e=B[t],n=S.querySelector(e);if(v[t]=e,!n||!n.nodeName)return void(f&&console.warn("Can't find",B[t]));B[t]=n}}),!(B.container.children.length<1)){var D=B.responsive,H=B.nested,k="carousel"===B.mode;if(D){0 in D&&(B=Mi(B,D[0]),delete D[0]);var p={};for(var m in D){var C=D[m];C="number"==typeof C?{items:C}:C,p[m]=C}D=p,p=null}if(k||function t(e){for(var n in e)k||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(B),!k){B.axis="horizontal",B.slideBy="page",B.edgePadding=!1;var R=B.animateIn,I=B.animateOut,w=B.animateDelay,P=B.animateNormal}var M,z,W="horizontal"===B.axis,T=S.createElement("div"),F=S.createElement("div"),q=B.container,E=q.parentNode,A=q.outerHTML,j=q.children,V=j.length,G=Ze(),Q=!1;D&&xn(),k&&(q.className+=" tns-vpfix");var N,L,X,Y,K,J=B.autoWidth,U=nn("fixedWidth"),_=nn("edgePadding"),Z=nn("gutter"),$=tn(),tt=nn("center"),et=J?1:Math.floor(nn("items")),nt=nn("slideBy"),it=B.viewportMax||B.fixedWidthViewportWidth,rt=nn("arrowKeys"),at=nn("speed"),ot=B.rewind,ut=!ot&&B.loop,lt=nn("autoHeight"),st=nn("controls"),ct=nn("controlsText"),ft=nn("nav"),dt=nn("touch"),vt=nn("mouseDrag"),pt=nn("autoplay"),mt=nn("autoplayTimeout"),ht=nn("autoplayText"),yt=nn("autoplayHoverPause"),gt=nn("autoplayResetOnVisibility"),xt=function(t){var e=document.createElement("style");return t&&e.setAttribute("media",t),document.querySelector("head").appendChild(e),e.sheet?e.sheet:e.styleSheet}(),bt=B.lazyload,Ct=(B.lazyloadSelector,[]),wt=ut?(Y=function(){{if(J||U&&!it)return V-1;var t=U?"fixedWidth":"items",e=[];if((U||B[t]<V)&&e.push(B[t]),D)for(var n in D){var i=D[n][t];i&&(U||i<V)&&e.push(i)}return e.length||e.push(0),Math.ceil(U?it/Math.min.apply(null,e):Math.max.apply(null,e))}}(),K=k?Math.ceil((5*Y-V)/2):4*Y-V,K=Math.max(Y,K),en("edgePadding")?K+1:K):0,Mt=k?V+2*wt:V+wt,Tt=!(!U&&!J||ut),Et=U?Xn():null,At=!k||!ut,Nt=W?"left":"top",Lt="",Bt="",St=U?function(){return tt&&!ut?V-1:Math.ceil(-Et/(U+Z))}:J?function(){for(var t=Mt;t--;)if(N[t]>=-Et)return t}:function(){return tt&&k&&!ut?V-1:ut||k?Math.max(0,Mt-Math.ceil(et)):Mt-1},Ot=Je(nn("startIndex")),Dt=Ot,Ht=(Ke(),0),kt=J?null:St(),Rt=B.preventActionWhenRunning,It=B.swipeAngle,Pt=!It||"?",zt=!1,Wt=B.onInit,Ft=new Yi,qt=" tns-slider tns-"+B.mode,jt=q.id||function(){var t=window.tnsId;return window.tnsId=t?t+1:1,"tns"+window.tnsId}(),Vt=nn("disable"),Gt=!1,Qt=B.freezable,Xt=!(!Qt||J)&&gn(),Yt=!1,Kt={click:ei,keydown:function(t){t=si(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);0<=e&&(0===e?me.disabled||ei(t,-1):he.disabled||ei(t,1))}},Jt={click:function(t){if(zt){if(Rt)return;$n()}var e=ci(t=si(t));for(;e!==be&&!Ri(e,"data-nav");)e=e.parentNode;if(Ri(e,"data-nav")){var n=Te=Number(Ii(e,"data-nav")),i=U||J?n*V/we:n*et;ti(ie?n:Math.min(Math.ceil(i),V-1),t),Ee===n&&(Oe&&oi(),Te=-1)}},keydown:function(t){t=si(t);var e=S.activeElement;if(!Ri(e,"data-nav"))return;var n=[r.LEFT,r.RIGHT,r.ENTER,r.SPACE].indexOf(t.keyCode),i=Number(Ii(e,"data-nav"));0<=n&&(0===n?0<i&&li(xe[i-1]):1===n?i<we-1&&li(xe[i+1]):ti(Te=i,t))}},Ut={mouseover:function(){Oe&&(ii(),De=!0)},mouseout:function(){De&&(ni(),De=!1)}},_t={visibilitychange:function(){S.hidden?Oe&&(ii(),ke=!0):ke&&(ni(),ke=!1)}},Zt={keydown:function(t){t=si(t);var e=[r.LEFT,r.RIGHT].indexOf(t.keyCode);0<=e&&ei(t,0===e?-1:1)}},$t={touchstart:pi,touchmove:mi,touchend:hi,touchcancel:hi},te={mousedown:pi,mousemove:mi,mouseup:hi,mouseleave:hi},ee=en("controls"),ne=en("nav"),ie=!!J||B.navAsThumbnails,re=en("autoplay"),ae=en("touch"),oe=en("mouseDrag"),ue="tns-slide-active",le="tns-complete",se={load:function(t){Ln(ci(t))},error:function(t){!function(t){Hi(t,"failed"),Bn(t)}(ci(t))}},ce="force"===B.preventScrollOnTouch;if(ee)var fe,de,ve=B.controlsContainer,pe=B.controlsContainer?B.controlsContainer.outerHTML:"",me=B.prevButton,he=B.nextButton,ye=B.prevButton?B.prevButton.outerHTML:"",ge=B.nextButton?B.nextButton.outerHTML:"";if(ne)var xe,be=B.navContainer,Ce=B.navContainer?B.navContainer.outerHTML:"",we=J?V:gi(),Me=0,Te=-1,Ee=_e(),Ae=Ee,Ne="tns-nav-active",Le="Carousel Page ",Be=" (Current Slide)";if(re)var Se,Oe,De,He,ke,Re="forward"===B.autoplayDirection?1:-1,Ie=B.autoplayButton,Pe=B.autoplayButton?B.autoplayButton.outerHTML:"",ze=["<span class='tns-visually-hidden'>"," animation</span>"];if(ae||oe)var We,Fe,qe={},je={},Ve=!1,Ge=W?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};J||Ye(Vt||Xt),a&&(Nt=a,Lt="translate",Bt=o?(Lt+=W?"3d(":"3d(0px, ",W?", 0px, 0px)":", 0px)"):(Lt+=W?"X(":"Y(",")")),k&&(q.className=q.className.replace("tns-vpfix","")),function(){en("gutter");T.className="tns-outer",F.className="tns-inner",T.id=jt+"-ow",F.id=jt+"-iw",""===q.id&&(q.id=jt);qt+=g||J?" tns-subpixel":" tns-no-subpixel",qt+=y?" tns-calc":" tns-no-calc",J&&(qt+=" tns-autowidth");qt+=" tns-"+B.axis,q.className+=qt,k?((M=S.createElement("div")).id=jt+"-mw",M.className="tns-ovh",T.appendChild(M),M.appendChild(F)):T.appendChild(F);if(lt){(M||F).className+=" tns-ah"}if(E.insertBefore(T,q),F.appendChild(q),Oi(j,function(t,e){Hi(t,"tns-item"),t.id||(t.id=jt+"-item"+e),!k&&P&&Hi(t,P),Pi(t,{"aria-hidden":"true",tabindex:"-1"})}),wt){for(var t=S.createDocumentFragment(),e=S.createDocumentFragment(),n=wt;n--;){var i=n%V,r=j[i].cloneNode(!0);if(zi(r,"id"),e.insertBefore(r,e.firstChild),k){var a=j[V-1-i].cloneNode(!0);zi(a,"id"),t.appendChild(a)}}q.insertBefore(t,q.firstChild),q.appendChild(e),j=q.children}}(),function(){if(!k)for(var t=Ot,e=Ot+Math.min(V,et);t<e;t++){var n=j[t];n.style.left=100*(t-Ot)/et+"%",Hi(n,R),ki(n,P)}W&&(g||J?(Bi(xt,"#"+jt+" > .tns-item","font-size:"+h.getComputedStyle(j[0]).fontSize+";",Si(xt)),Bi(xt,"#"+jt,"font-size:0;",Si(xt))):k&&Oi(j,function(t,e){t.style.marginLeft=function(t){return y?y+"("+100*t+"% / "+Mt+")":100*t/Mt+"%"}(e)}));if(O){if(x){var i=M&&B.autoHeight?sn(B.speed):"";Bi(xt,"#"+jt+"-mw",i,Si(xt))}i=rn(B.edgePadding,B.gutter,B.fixedWidth,B.speed,B.autoHeight),Bi(xt,"#"+jt+"-iw",i,Si(xt)),k&&(i=W&&!J?"width:"+an(B.fixedWidth,B.gutter,B.items)+";":"",x&&(i+=sn(at)),Bi(xt,"#"+jt,i,Si(xt))),i=W&&!J?on(B.fixedWidth,B.gutter,B.items):"",B.gutter&&(i+=un(B.gutter)),k||(x&&(i+=sn(at)),b&&(i+=cn(at))),i&&Bi(xt,"#"+jt+" > .tns-item",i,Si(xt))}else{kn(),F.style.cssText=rn(_,Z,U,lt),k&&W&&!J&&(q.style.width=an(U,Z,et));i=W&&!J?on(U,Z,et):"";Z&&(i+=un(Z)),i&&Bi(xt,"#"+jt+" > .tns-item",i,Si(xt))}if(D&&O)for(var r in D){r=parseInt(r);var a=D[r],o=(i="",""),u="",l="",s="",c=J?null:nn("items",r),f=nn("fixedWidth",r),d=nn("speed",r),v=nn("edgePadding",r),p=nn("autoHeight",r),m=nn("gutter",r);x&&M&&nn("autoHeight",r)&&"speed"in a&&(o="#"+jt+"-mw{"+sn(d)+"}"),("edgePadding"in a||"gutter"in a)&&(u="#"+jt+"-iw{"+rn(v,m,f,d,p)+"}"),k&&W&&!J&&("fixedWidth"in a||"items"in a||U&&"gutter"in a)&&(l="width:"+an(f,m,c)+";"),x&&"speed"in a&&(l+=sn(d)),l&&(l="#"+jt+"{"+l+"}"),("fixedWidth"in a||U&&"gutter"in a||!k&&"items"in a)&&(s+=on(f,m,c)),"gutter"in a&&(s+=un(m)),!k&&"speed"in a&&(x&&(s+=sn(d)),b&&(s+=cn(d))),s&&(s="#"+jt+" > .tns-item{"+s+"}"),(i=o+u+l+s)&&xt.insertRule("@media (min-width: "+r/16+"em) {"+i+"}",xt.cssRules.length)}}(),fn();var Qe=ut?k?function(){var t=Ht,e=kt;t+=nt,e-=nt,_?(t+=1,e-=1):U&&($+Z)%(U+Z)&&(e-=1),wt&&(e<Ot?Ot-=V:Ot<t&&(Ot+=V))}:function(){if(kt<Ot)for(;Ht+V<=Ot;)Ot-=V;else if(Ot<Ht)for(;Ot<=kt-V;)Ot+=V}:function(){Ot=Math.max(Ht,Math.min(kt,Ot))},Xe=k?function(){Gn(q,""),x||!at?(Jn(),at&&ji(q)||$n()):function(e,n,i,r,t,a,o){var u=Math.min(a,10),l=0<=t.indexOf("%")?"%":"px",s=(t=t.replace(l,""),Number(e.style[n].replace(i,"").replace(r,"").replace(l,""))),c=(t-s)/a*u;setTimeout(function t(){a-=u,s+=c,e.style[n]=i+s+l+r,0<a?setTimeout(t,u):o()},u)}(q,Nt,Lt,Bt,Yn(),at,$n),W||yi()}:function(){Ct=[];var t={};t[s]=t[c]=$n,Xi(j[Dt],t),Qi(j[Ot],t),Un(Dt,R,I,!0),Un(Ot,P,R),s&&c&&at&&ji(q)||$n()};return{version:"2.9.2",getInfo:bi,events:Ft,goTo:ti,play:function(){pt&&!Oe&&(ai(),He=!1)},pause:function(){Oe&&(oi(),He=!0)},isOn:Q,updateSliderHeight:In,refresh:fn,destroy:function(){if(xt.disabled=!0,xt.ownerNode&&xt.ownerNode.remove(),Xi(h,{resize:hn}),rt&&Xi(S,Zt),ve&&Xi(ve,Kt),be&&Xi(be,Jt),Xi(q,Ut),Xi(q,_t),Ie&&Xi(Ie,{click:ui}),pt&&clearInterval(Se),k&&s){var t={};t[s]=$n,Xi(q,t)}dt&&Xi(q,$t),vt&&Xi(q,te);var a=[A,pe,ye,ge,Ce,Pe];for(var e in d.forEach(function(t,e){var n="container"===t?T:B[t];if("object"==typeof n){var i=!!n.previousElementSibling&&n.previousElementSibling,r=n.parentNode;n.outerHTML=a[e],B[t]=i?i.nextElementSibling:r.firstElementChild}}),d=R=I=w=P=W=T=F=q=E=A=j=V=z=G=J=U=_=Z=$=et=nt=it=rt=at=ot=ut=lt=xt=bt=N=Ct=wt=Mt=Tt=Et=At=Nt=Lt=Bt=St=Ot=Dt=Ht=kt=It=Pt=zt=Wt=Ft=qt=jt=Vt=Gt=Qt=Xt=Yt=Kt=Jt=Ut=_t=Zt=$t=te=ee=ne=ie=re=ae=oe=ue=le=se=L=st=ct=ve=pe=me=he=fe=de=ft=be=Ce=xe=we=Me=Te=Ee=Ae=Ne=Le=Be=pt=mt=Re=ht=yt=Ie=Pe=gt=ze=Se=Oe=De=He=ke=qe=je=We=Ve=Fe=Ge=dt=vt=null,this)"rebuild"!==e&&(this[e]=null);Q=!1},rebuild:function(){return Ki(Mi(B,v))}}}function Ye(t){t&&(st=ft=dt=vt=rt=pt=yt=gt=!1)}function Ke(){for(var t=k?Ot-wt:Ot;t<0;)t+=V;return t%V+1}function Je(t){return t=t?Math.max(0,Math.min(ut?V-1:V-et,t)):0,k?t+wt:t}function Ue(t){for(null==t&&(t=Ot),k&&(t-=wt);t<0;)t+=V;return Math.floor(t%V)}function _e(){var t,e=Ue();return t=ie?e:U||J?Math.ceil((e+1)*we/V-1):Math.floor(e/et),!ut&&k&&Ot===kt&&(t=we-1),t}function Ze(){return h.innerWidth||S.documentElement.clientWidth||S.body.clientWidth}function $e(t){return"top"===t?"afterbegin":"beforeend"}function tn(){var t=_?2*_-Z:0;return function t(e){var n,i,r=S.createElement("div");return e.appendChild(r),i=(n=r.getBoundingClientRect()).right-n.left,r.remove(),i||t(e.parentNode)}(E)-t}function en(t){if(B[t])return!0;if(D)for(var e in D)if(D[e][t])return!0;return!1}function nn(t,e){if(null==e&&(e=G),"items"===t&&U)return Math.floor(($+Z)/(U+Z))||1;var n=B[t];if(D)for(var i in D)e>=parseInt(i)&&t in D[i]&&(n=D[i][t]);return"slideBy"===t&&"page"===n&&(n=nn("items")),k||"slideBy"!==t&&"items"!==t||(n=Math.floor(n)),n}function rn(t,e,n,i,r){var a="";if(void 0!==t){var o=t;e&&(o-=e),a=W?"margin: 0 "+o+"px 0 "+t+"px;":"margin: "+t+"px 0 "+o+"px 0;"}else if(e&&!n){var u="-"+e+"px";a="margin: 0 "+(W?u+" 0 0":"0 "+u+" 0")+";"}return!k&&r&&x&&i&&(a+=sn(i)),a}function an(t,e,n){return t?(t+e)*Mt+"px":y?y+"("+100*Mt+"% / "+n+")":100*Mt/n+"%"}function on(t,e,n){var i;if(t)i=t+e+"px";else{k||(n=Math.floor(n));var r=k?Mt:n;i=y?y+"(100% / "+r+")":100/r+"%"}return i="width:"+i,"inner"!==H?i+";":i+" !important;"}function un(t){var e="";!1!==t&&(e=(W?"padding-":"margin-")+(W?"right":"bottom")+": "+t+"px;");return e}function ln(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n&&(n="-"+n+"-"),n}function sn(t){return ln(x,18)+"transition-duration:"+t/1e3+"s;"}function cn(t){return ln(b,17)+"animation-duration:"+t/1e3+"s;"}function fn(){if(en("autoHeight")||J||!W){var t=q.querySelectorAll("img");Oi(t,function(t){var e=t.src;e&&e.indexOf("data:image")<0?(Qi(t,se),t.src="",t.src=e,Hi(t,"loading")):bt||Ln(t)}),Ci(function(){Dn(Wi(t),function(){L=!0})}),!J&&W&&(t=Sn(Ot,Math.min(Ot+et-1,Mt-1))),bt?dn():Ci(function(){Dn(Wi(t),dn)})}else k&&Kn(),pn(),mn()}function dn(){if(J){var e=ut?Ot:V-1;!function t(){j[e-1].getBoundingClientRect().right.toFixed(2)===j[e].getBoundingClientRect().left.toFixed(2)?vn():setTimeout(function(){t()},16)}()}else vn()}function vn(){W&&!J||(Pn(),J?(Et=Xn(),Qt&&(Xt=gn()),kt=St(),Ye(Vt||Xt)):yi()),k&&Kn(),pn(),mn()}function pn(){if(zn(),T.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+En()+"</span>  of "+V+"</div>"),X=T.querySelector(".tns-liveregion .current"),re){var t=pt?"stop":"start";Ie?Pi(Ie,{"data-action":t}):B.autoplayButtonOutput&&(T.insertAdjacentHTML($e(B.autoplayPosition),'<button data-action="'+t+'">'+ze[0]+t+ze[1]+ht[0]+"</button>"),Ie=T.querySelector("[data-action]")),Ie&&Qi(Ie,{click:ui}),pt&&(ai(),yt&&Qi(q,Ut),gt&&Qi(q,_t))}if(ne){if(be)Pi(be,{"aria-label":"Carousel Pagination"}),Oi(xe=be.children,function(t,e){Pi(t,{"data-nav":e,tabindex:"-1","aria-label":Le+(e+1),"aria-controls":jt})});else{for(var e="",n=ie?"":'style="display:none"',i=0;i<V;i++)e+='<button data-nav="'+i+'" tabindex="-1" aria-controls="'+jt+'" '+n+' aria-label="'+Le+(i+1)+'"></button>';e='<div class="tns-nav" aria-label="Carousel Pagination">'+e+"</div>",T.insertAdjacentHTML($e(B.navPosition),e),be=T.querySelector(".tns-nav"),xe=be.children}if(xi(),x){var r=x.substring(0,x.length-18).toLowerCase(),a="transition: all "+at/1e3+"s";r&&(a="-"+r+"-"+a),Bi(xt,"[aria-controls^="+jt+"-item]",a,Si(xt))}Pi(xe[Ee],{"aria-label":Le+(Ee+1)+Be}),zi(xe[Ee],"tabindex"),Hi(xe[Ee],Ne),Qi(be,Jt)}ee&&(ve||me&&he||(T.insertAdjacentHTML($e(B.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+jt+'">'+ct[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+jt+'">'+ct[1]+"</button></div>"),ve=T.querySelector(".tns-controls")),me&&he||(me=ve.children[0],he=ve.children[1]),B.controlsContainer&&Pi(ve,{"aria-label":"Carousel Navigation",tabindex:"0"}),(B.controlsContainer||B.prevButton&&B.nextButton)&&Pi([me,he],{"aria-controls":jt,tabindex:"-1"}),(B.controlsContainer||B.prevButton&&B.nextButton)&&(Pi(me,{"data-controls":"prev"}),Pi(he,{"data-controls":"next"})),fe=Fn(me),de=Fn(he),Vn(),ve?Qi(ve,Kt):(Qi(me,Kt),Qi(he,Kt))),bn()}function mn(){if(k&&s){var t={};t[s]=$n,Qi(q,t)}dt&&Qi(q,$t,B.preventScrollOnTouch),vt&&Qi(q,te),rt&&Qi(S,Zt),"inner"===H?Ft.on("outerResized",function(){yn(),Ft.emit("innerLoaded",bi())}):(D||U||J||lt||!W)&&Qi(h,{resize:hn}),lt&&("outer"===H?Ft.on("innerLoaded",On):Vt||On()),Nn(),Vt?Mn():Xt&&wn(),Ft.on("indexChanged",Hn),"inner"===H&&Ft.emit("innerLoaded",bi()),"function"==typeof Wt&&Wt(bi()),Q=!0}function hn(t){Ci(function(){yn(si(t))})}function yn(t){if(Q){"outer"===H&&Ft.emit("outerResized",bi(t)),G=Ze();var e,n=z,i=!1;D&&(xn(),(e=n!==z)&&Ft.emit("newBreakpointStart",bi(t)));var r,a,o=et,u=Vt,l=Xt,s=rt,c=st,f=ft,d=dt,v=vt,p=pt,m=yt,h=gt,y=Ot;if(e){var g=U,x=lt,b=ct,C=tt,w=ht;if(!O)var M=Z,T=_}if(rt=nn("arrowKeys"),st=nn("controls"),ft=nn("nav"),dt=nn("touch"),tt=nn("center"),vt=nn("mouseDrag"),pt=nn("autoplay"),yt=nn("autoplayHoverPause"),gt=nn("autoplayResetOnVisibility"),e&&(Vt=nn("disable"),U=nn("fixedWidth"),at=nn("speed"),lt=nn("autoHeight"),ct=nn("controlsText"),ht=nn("autoplayText"),mt=nn("autoplayTimeout"),O||(_=nn("edgePadding"),Z=nn("gutter"))),Ye(Vt),$=tn(),W&&!J||Vt||(Pn(),W||(yi(),i=!0)),(U||J)&&(Et=Xn(),kt=St()),(e||U)&&(et=nn("items"),nt=nn("slideBy"),(a=et!==o)&&(U||J||(kt=St()),Qe())),e&&Vt!==u&&(Vt?Mn():function(){if(!Gt)return;if(xt.disabled=!1,q.className+=qt,Kn(),ut)for(var t=wt;t--;)k&&qi(j[t]),qi(j[Mt-t-1]);if(!k)for(var e=Ot,n=Ot+V;e<n;e++){var i=j[e],r=e<Ot+et?R:P;i.style.left=100*(e-Ot)/et+"%",Hi(i,r)}Cn(),Gt=!1}()),Qt&&(e||U||J)&&(Xt=gn())!==l&&(Xt?(Jn(Yn(Je(0))),wn()):(function(){if(!Yt)return;_&&O&&(F.style.margin="");if(wt)for(var t="tns-transparent",e=wt;e--;)k&&ki(j[e],t),ki(j[Mt-e-1],t);Cn(),Yt=!1}(),i=!0)),Ye(Vt||Xt),pt||(yt=gt=!1),rt!==s&&(rt?Qi(S,Zt):Xi(S,Zt)),st!==c&&(st?ve?qi(ve):(me&&qi(me),he&&qi(he)):ve?Fi(ve):(me&&Fi(me),he&&Fi(he))),ft!==f&&(ft?qi(be):Fi(be)),dt!==d&&(dt?Qi(q,$t,B.preventScrollOnTouch):Xi(q,$t)),vt!==v&&(vt?Qi(q,te):Xi(q,te)),pt!==p&&(pt?(Ie&&qi(Ie),Oe||He||ai()):(Ie&&Fi(Ie),Oe&&oi())),yt!==m&&(yt?Qi(q,Ut):Xi(q,Ut)),gt!==h&&(gt?Qi(S,_t):Xi(S,_t)),e){if(U===g&&tt===C||(i=!0),lt!==x&&(lt||(F.style.height="")),st&&ct!==b&&(me.innerHTML=ct[0],he.innerHTML=ct[1]),Ie&&ht!==w){var E=pt?1:0,A=Ie.innerHTML,N=A.length-w[E].length;A.substring(N)===w[E]&&(Ie.innerHTML=A.substring(0,N)+ht[E])}}else tt&&(U||J)&&(i=!0);if((a||U&&!J)&&(we=gi(),xi()),(r=Ot!==y)?(Ft.emit("indexChanged",bi()),i=!0):a?r||Hn():(U||J)&&(Nn(),zn(),Tn()),a&&!k&&function(){for(var t=Ot+Math.min(V,et),e=Mt;e--;){var n=j[e];Ot<=e&&e<t?(Hi(n,"tns-moving"),n.style.left=100*(e-Ot)/et+"%",Hi(n,R),ki(n,P)):n.style.left&&(n.style.left="",Hi(n,P),ki(n,R)),ki(n,I)}setTimeout(function(){Oi(j,function(t){ki(t,"tns-moving")})},300)}(),!Vt&&!Xt){if(e&&!O&&(lt===autoheightTem&&at===speedTem||kn(),_===T&&Z===M||(F.style.cssText=rn(_,Z,U,at,lt)),W)){k&&(q.style.width=an(U,Z,et));var L=on(U,Z,et)+un(Z);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(xt,Si(xt)-1),Bi(xt,"#"+jt+" > .tns-item",L,Si(xt))}lt&&On(),i&&(Kn(),Dt=Ot)}e&&Ft.emit("newBreakpointEnd",bi(t))}}function gn(){if(!U&&!J)return V<=(tt?et-(et-1)/2:et);var t=U?(U+Z)*V:N[V],e=_?$+2*_:$+Z;return tt&&(e-=U?($-U)/2:($-(N[Ot+1]-N[Ot]-Z))/2),t<=e}function xn(){for(var t in z=0,D)(t=parseInt(t))<=G&&(z=t)}function bn(){!pt&&Ie&&Fi(Ie),!ft&&be&&Fi(be),st||(ve?Fi(ve):(me&&Fi(me),he&&Fi(he)))}function Cn(){pt&&Ie&&qi(Ie),ft&&be&&qi(be),st&&(ve?qi(ve):(me&&qi(me),he&&qi(he)))}function wn(){if(!Yt){if(_&&(F.style.margin="0px"),wt)for(var t="tns-transparent",e=wt;e--;)k&&Hi(j[e],t),Hi(j[Mt-e-1],t);bn(),Yt=!0}}function Mn(){if(!Gt){if(xt.disabled=!0,q.className=q.className.replace(qt.substring(1),""),zi(q,["style"]),ut)for(var t=wt;t--;)k&&Fi(j[t]),Fi(j[Mt-t-1]);if(W&&k||zi(F,["style"]),!k)for(var e=Ot,n=Ot+V;e<n;e++){var i=j[e];zi(i,["style"]),ki(i,R),ki(i,P)}bn(),Gt=!0}}function Tn(){var t=En();X.innerHTML!==t&&(X.innerHTML=t)}function En(){var t=An(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function An(t){null==t&&(t=Yn());var n,i,r,a=Ot;if(tt||_?(J||U)&&(i=-(parseFloat(t)+_),r=i+$+2*_):J&&(i=N[Ot],r=i+$),J)N.forEach(function(t,e){e<Mt&&((tt||_)&&t<=i+.5&&(a=e),.5<=r-t&&(n=e))});else{if(U){var e=U+Z;n=tt||_?(a=Math.floor(i/e),Math.ceil(r/e-1)):a+Math.ceil($/e)-1}else if(tt||_){var o=et-1;if(n=tt?(a-=o/2,Ot+o/2):Ot+o,_){var u=_*et/$;a-=u,n+=u}a=Math.floor(a),n=Math.ceil(n)}else n=a+et-1;a=Math.max(a,0),n=Math.min(n,Mt-1)}return[a,n]}function Nn(){bt&&!Vt&&Sn.apply(null,An()).forEach(function(t){if(!Di(t,le)){var e={};e[s]=function(t){t.stopPropagation()},Qi(t,e),Qi(t,se),t.src=Ii(t,"data-src");var n=Ii(t,"data-srcset");n&&(t.srcset=n),Hi(t,"loading")}})}function Ln(t){Hi(t,"loaded"),Bn(t)}function Bn(t){Hi(t,"tns-complete"),ki(t,"loading"),Xi(t,se)}function Sn(t,e){for(var n=[];t<=e;)Oi(j[t].querySelectorAll("img"),function(t){n.push(t)}),t++;return n}function On(){var t=Sn.apply(null,An());Ci(function(){Dn(t,In)})}function Dn(n,t){return L?t():(n.forEach(function(t,e){Di(t,le)&&n.splice(e,1)}),n.length?void Ci(function(){Dn(n,t)}):t())}function Hn(){Nn(),zn(),Tn(),Vn(),function(){if(ft&&(Ee=0<=Te?Te:_e(),Te=-1,Ee!==Ae)){var t=xe[Ae],e=xe[Ee];Pi(t,{tabindex:"-1","aria-label":Le+(Ae+1)}),ki(t,Ne),Pi(e,{"aria-label":Le+(Ee+1)+Be}),zi(e,"tabindex"),Hi(e,Ne),Ae=Ee}}()}function kn(){k&&lt&&(M.style[x]=at/1e3+"s")}function Rn(t,e){for(var n=[],i=t,r=Math.min(t+e,Mt);i<r;i++)n.push(j[i].offsetHeight);return Math.max.apply(null,n)}function In(){var t=lt?Rn(Ot,et):Rn(wt,V),e=M||F;e.style.height!==t&&(e.style.height=t+"px")}function Pn(){N=[0];var n=W?"left":"top",i=W?"right":"bottom",r=j[0].getBoundingClientRect()[n];Oi(j,function(t,e){e&&N.push(t.getBoundingClientRect()[n]-r),e===Mt-1&&N.push(t.getBoundingClientRect()[i]-r)})}function zn(){var t=An(),n=t[0],i=t[1];Oi(j,function(t,e){n<=e&&e<=i?Ri(t,"aria-hidden")&&(zi(t,["aria-hidden","tabindex"]),Hi(t,ue)):Ri(t,"aria-hidden")||(Pi(t,{"aria-hidden":"true",tabindex:"-1"}),ki(t,ue))})}function Wn(t){return t.nodeName.toLowerCase()}function Fn(t){return"button"===Wn(t)}function qn(t){return"true"===t.getAttribute("aria-disabled")}function jn(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function Vn(){if(st&&!ot&&!ut){var t=fe?me.disabled:qn(me),e=de?he.disabled:qn(he),n=Ot<=Ht,i=!ot&&kt<=Ot;n&&!t&&jn(fe,me,!0),!n&&t&&jn(fe,me,!1),i&&!e&&jn(de,he,!0),!i&&e&&jn(de,he,!1)}}function Gn(t,e){x&&(t.style[x]=e)}function Qn(t){return null==t&&(t=Ot),J?($-(_?Z:0)-(N[t+1]-N[t]-Z))/2:U?($-U)/2:(et-1)/2}function Xn(){var t=$+(_?Z:0)-(U?(U+Z)*Mt:N[Mt]);return tt&&!ut&&(t=U?-(U+Z)*(Mt-1)-Qn():Qn(Mt-1)-N[Mt-1]),0<t&&(t=0),t}function Yn(t){var e;if(null==t&&(t=Ot),W&&!J)if(U)e=-(U+Z)*t,tt&&(e+=Qn());else{var n=a?Mt:et;tt&&(t-=Qn()),e=100*-t/n}else e=-N[t],tt&&J&&(e+=Qn());return Tt&&(e=Math.max(e,Et)),e+=!W||J||U?"px":"%"}function Kn(t){Gn(q,"0s"),Jn(t)}function Jn(t){null==t&&(t=Yn()),q.style[Nt]=Lt+t+Bt}function Un(t,e,n,i){var r=t+et;ut||(r=Math.min(r,Mt));for(var a=t;a<r;a++){var o=j[a];i||(o.style.left=100*(a-Ot)/et+"%"),w&&u&&(o.style[u]=o.style[l]=w*(a-t)/1e3+"s"),ki(o,e),Hi(o,n),i&&Ct.push(o)}}function _n(t,e){At&&Qe(),Ot===Dt&&!e||(Ft.emit("indexChanged",bi()),Ft.emit("transitionStart",bi()),lt&&On(),Oe&&t&&0<=["click","keydown"].indexOf(t.type)&&oi(),zt=!0,Xe())}function Zn(t){return t.toLowerCase().replace(/-/g,"")}function $n(t){if(k||zt){if(Ft.emit("transitionEnd",bi(t)),!k&&0<Ct.length)for(var e=0;e<Ct.length;e++){var n=Ct[e];n.style.left="",l&&u&&(n.style[l]="",n.style[u]=""),ki(n,I),Hi(n,P)}if(!t||!k&&t.target.parentNode===q||t.target===q&&Zn(t.propertyName)===Zn(Nt)){if(!At){var i=Ot;Qe(),Ot!==i&&(Ft.emit("indexChanged",bi()),Kn())}"inner"===H&&Ft.emit("innerLoaded",bi()),zt=!1,Dt=Ot}}}function ti(t,e){if(!Xt)if("prev"===t)ei(e,-1);else if("next"===t)ei(e,1);else{if(zt){if(Rt)return;$n()}var n=Ue(),i=0;if("first"===t?i=-n:"last"===t?i=k?V-et-n:V-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(V-1,t))),i=t-n)),!k&&i&&Math.abs(i)<et){var r=0<i?1:-1;i+=Ht<=Ot+i-V?V*r:2*V*r*-1}Ot+=i,k&&ut&&(Ot<Ht&&(Ot+=V),kt<Ot&&(Ot-=V)),Ue(Ot)!==Ue(Dt)&&_n(e)}}function ei(t,e){if(zt){if(Rt)return;$n()}var n;if(!e){for(var i=ci(t=si(t));i!==ve&&[me,he].indexOf(i)<0;)i=i.parentNode;var r=[me,he].indexOf(i);0<=r&&(n=!0,e=0===r?-1:1)}if(ot){if(Ot===Ht&&-1===e)return void ti("last",t);if(Ot===kt&&1===e)return void ti("first",t)}e&&(Ot+=nt*e,J&&(Ot=Math.floor(Ot)),_n(n||t&&"keydown"===t.type?t:null))}function ni(){Se=setInterval(function(){ei(null,Re)},mt),Oe=!0}function ii(){clearInterval(Se),Oe=!1}function ri(t,e){Pi(Ie,{"data-action":t}),Ie.innerHTML=ze[0]+t+ze[1]+e}function ai(){ni(),Ie&&ri("stop",ht[1])}function oi(){ii(),Ie&&ri("start",ht[0])}function ui(){He=Oe?(oi(),!0):(ai(),!1)}function li(t){t.focus()}function si(t){return fi(t=t||h.event)?t.changedTouches[0]:t}function ci(t){return t.target||h.event.srcElement}function fi(t){return 0<=t.type.indexOf("touch")}function di(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function vi(){return function(t,e){var n=!1,i=Math.abs(90-Math.abs(t));return 90-e<=i?n="horizontal":i<=e&&(n="vertical"),n}(function(t,e){return Math.atan2(t,e)*(180/Math.PI)}(je.y-qe.y,je.x-qe.x),It)===B.axis}function pi(t){if(zt){if(Rt)return;$n()}pt&&Oe&&ii(),Ve=!0,Fe&&(wi(Fe),Fe=null);var e=si(t);Ft.emit(fi(t)?"touchStart":"dragStart",bi(t)),!fi(t)&&0<=["img","a"].indexOf(Wn(ci(t)))&&di(t),je.x=qe.x=e.clientX,je.y=qe.y=e.clientY,k&&(We=parseFloat(q.style[Nt].replace(Lt,"")),Gn(q,"0s"))}function mi(t){if(Ve){var e=si(t);je.x=e.clientX,je.y=e.clientY,k?Fe||(Fe=Ci(function(){!function t(e){if(!Pt)return void(Ve=!1);wi(Fe);Ve&&(Fe=Ci(function(){t(e)}));"?"===Pt&&(Pt=vi());if(Pt){!ce&&fi(e)&&(ce=!0);try{e.type&&Ft.emit(fi(e)?"touchMove":"dragMove",bi(e))}catch(t){}var n=We,i=Ge(je,qe);if(!W||U||J)n+=i,n+="px";else{var r=a?i*et*100/(($+Z)*Mt):100*i/($+Z);n+=r,n+="%"}q.style[Nt]=Lt+n+Bt}}(t)})):("?"===Pt&&(Pt=vi()),Pt&&(ce=!0)),ce&&t.preventDefault()}}function hi(i){if(Ve){Fe&&(wi(Fe),Fe=null),k&&Gn(q,""),Ve=!1;var t=si(i);je.x=t.clientX,je.y=t.clientY;var r=Ge(je,qe);if(Math.abs(r)){if(!fi(i)){var n=ci(i);Qi(n,{click:function t(e){di(e),Xi(n,{click:t})}})}k?Fe=Ci(function(){if(W&&!J){var t=-r*et/($+Z);t=0<r?Math.floor(t):Math.ceil(t),Ot+=t}else{var e=-(We+r);if(e<=0)Ot=Ht;else if(e>=N[Mt-1])Ot=kt;else for(var n=0;n<Mt&&e>=N[n];)e>N[Ot=n]&&r<0&&(Ot+=1),n++}_n(i,r),Ft.emit(fi(i)?"touchEnd":"dragEnd",bi(i))}):Pt&&ei(i,0<r?-1:1)}}"auto"===B.preventScrollOnTouch&&(ce=!1),It&&(Pt="?"),pt&&!Oe&&ni()}function yi(){(M||F).style.height=N[Ot+et]-N[Ot]+"px"}function gi(){var t=U?(U+Z)*V/$:V/et;return Math.min(Math.ceil(t),V)}function xi(){if(ft&&!ie&&we!==Me){var t=Me,e=we,n=qi;for(we<Me&&(t=we,e=Me,n=Fi);t<e;)n(xe[t]),t++;Me=we}}function bi(t){return{container:q,slideItems:j,navContainer:be,navItems:xe,controlsContainer:ve,hasControls:ee,prevButton:me,nextButton:he,items:et,slideBy:nt,cloneCount:wt,slideCount:V,slideCountNew:Mt,index:Ot,indexCached:Dt,displayIndex:Ke(),navCurrentIndex:Ee,navCurrentIndexCached:Ae,pages:we,pagesCached:Me,sheet:xt,isOn:Q,event:t||{}}}f&&console.warn("No slides found in",B.container)};return Ki}();
Array.prototype.forEach||(Array.prototype.forEach=function(e,t){for(var n=this.length>>>0,r=0;r<n;r++)r in this&&e.call(t,this[r],r,this)}),Array.prototype.map||(Array.prototype.map=function(e){var t=this.length>>>0;if("function"!=typeof e)throw new TypeError;for(var n=new Array(t),r=arguments[1],o=0;o<t;o++)o in this&&(n[o]=e.call(r,this[o],o,this));return n}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var t=this.length;if(!t)return-1;var n=arguments[1]||0;if(t<=n)return-1;for(n<0&&(n+=t);n<t;n++)if(Object.prototype.hasOwnProperty.call(this,n)&&e===this[n])return n;return-1}),function(){if(!Element.prototype.addEventListener){function e(e,t){function n(e){e.target=e.srcElement,e.currentTarget=r,void 0!==t.handleEvent?t.handleEvent(e):t.call(r,e)}var r=this;if("DOMContentLoaded"==e){function o(e){"complete"==document.readyState&&n(e)}if(document.attachEvent("onreadystatechange",o),p.push({object:this,type:e,listener:t,wrapper:o}),"complete"==document.readyState){var i=new Event;i.srcElement=window,o(i)}}else this.attachEvent("on"+e,n),p.push({object:this,type:e,listener:t,wrapper:n})}function t(e,t){for(var n=0;n<p.length;){var r=p[n];if(r.object==this&&r.type==e&&r.listener==t){"DOMContentLoaded"==e?this.detachEvent("onreadystatechange",r.wrapper):this.detachEvent("on"+e,r.wrapper),p.splice(n,1);break}++n}}var p=[];Element.prototype.addEventListener=e,Element.prototype.removeEventListener=t,HTMLDocument&&(HTMLDocument.prototype.addEventListener=e,HTMLDocument.prototype.removeEventListener=t),Window&&(Window.prototype.addEventListener=e,Window.prototype.removeEventListener=t)}}(),"firstElementChild"in document.documentElement||Object.defineProperty(Element.prototype,"firstElementChild",{get:function(){for(var e,t=this.children,n=0,r=t.length;n<r;++n)if(1===(e=t[n]).nodeType)return e;return null}}),"previousElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"previousElementSibling",{get:function(){for(var e=this.previousSibling;e&&1!==e.nodeType;)e=e.previousSibling;return e}}),"nextElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"nextElementSibling",{get:function(){for(var e=this.nextSibling;e&&1!==e.nodeType;)e=e.nextSibling;return e}}),window.getComputedStyle||(window.getComputedStyle=function(e){if(!e)return null;var t=e.currentStyle,n=e.getBoundingClientRect(),r=document.createElement("div").style;for(var o in t)r[o]=t[o];return r.cssFloat=r.styleFloat,"auto"===r.width&&(r.width=n.right-n.left+"px"),"auto"===r.height&&(r.height=n.bottom-n.top+"px"),r});
!function(e,t){"object"==typeof exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.getYouTubeID=t()}(this,function(e){return function(e,t){if(null==t&&(t={fuzzy:!0}),/youtu\.?be/.test(e)){var n,u=[/youtu\.be\/([^#\&\?]{11})/,/\?v=([^#\&\?]{11})/,/\&v=([^#\&\?]{11})/,/embed\/([^#\&\?]{11})/,/\/v\/([^#\&\?]{11})/];for(n=0;n<u.length;++n)if(u[n].test(e))return u[n].exec(e)[1];if(t.fuzzy){var f=e.split(/[\/\&\?=#\.\s]/g);for(n=0;n<f.length;++n)if(/^[^#\&\?]{11}$/.test(f[n]))return f[n]}}return null}});
!function(o){var n={};function i(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return o[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=o,i.c=n,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(o,n,function(e){return t[e]}.bind(null,n));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=11)}([,,function(e,t,o){"use strict";e.exports=function(e){"complete"===document.readyState||"interactive"===document.readyState?e.call():document.attachEvent?document.attachEvent("onreadystatechange",function(){"interactive"===document.readyState&&e.call()}):document.addEventListener&&document.addEventListener("DOMContentLoaded",e)}},,function(o,e,t){"use strict";(function(e){var t;t="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},o.exports=t}).call(this,t(5))},function(e,t,o){"use strict";var n,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":i(window))&&(n=window)}e.exports=n},,,,,,function(e,t,o){e.exports=o(12)},function(e,t,o){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=l(o(2)),a=o(4),r=l(o(13));function l(e){return e&&e.__esModule?e:{default:e}}var s=a.window.jarallax;if(a.window.jarallax=r.default,a.window.jarallax.noConflict=function(){return a.window.jarallax=s,this},void 0!==a.jQuery){var c=function(){var e=arguments||[];Array.prototype.unshift.call(e,this);var t=r.default.apply(a.window,e);return"object"!==(void 0===t?"undefined":n(t))?t:this};c.constructor=r.default.constructor;var u=a.jQuery.fn.jarallax;a.jQuery.fn.jarallax=c,a.jQuery.fn.jarallax.noConflict=function(){return a.jQuery.fn.jarallax=u,this}}(0,i.default)(function(){(0,r.default)(document.querySelectorAll("[data-jarallax]"))})},function(e,P,E){"use strict";(function(e){Object.defineProperty(P,"__esModule",{value:!0});var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var o=[],n=!0,i=!1,a=void 0;try{for(var r,l=e[Symbol.iterator]();!(n=(r=l.next()).done)&&(o.push(r.value),!t||o.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{!n&&l.return&&l.return()}finally{if(i)throw a}}return o}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},t=function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e};function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=r(E(2)),i=r(E(14)),a=E(4);function r(e){return e&&e.__esModule?e:{default:e}}var s=-1<navigator.userAgent.indexOf("MSIE ")||-1<navigator.userAgent.indexOf("Trident/")||-1<navigator.userAgent.indexOf("Edge/"),l=function(){for(var e="transform WebkitTransform MozTransform".split(" "),t=document.createElement("div"),o=0;o<e.length;o++)if(t&&void 0!==t.style[e[o]])return e[o];return!1}(),b=void 0,v=void 0,c=void 0,p=!1,m=!1;function f(e){b=a.window.innerWidth||document.documentElement.clientWidth,v=a.window.innerHeight||document.documentElement.clientHeight,"object"!==(void 0===e?"undefined":d(e))||"load"!==e.type&&"dom-loaded"!==e.type||(p=!0)}f(),a.window.addEventListener("resize",f),a.window.addEventListener("orientationchange",f),a.window.addEventListener("load",f),(0,o.default)(function(){f({type:"dom-loaded"})});var y=[],g=!1;function h(){if(y.length){c=void 0!==a.window.pageYOffset?a.window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop;var t=p||!g||g.width!==b||g.height!==v,o=m||t||!g||g.y!==c;m=p=!1,(t||o)&&(y.forEach(function(e){t&&e.onResize(),o&&e.onScroll()}),g={width:b,height:v,y:c}),(0,i.default)(h)}}var x=!!e.ResizeObserver&&new e.ResizeObserver(function(e){e&&e.length&&(0,i.default)(function(){e.forEach(function(e){e.target&&e.target.jarallax&&(p||e.target.jarallax.onResize(),m=!0)})})}),w=0,$=(t(j,[{key:"css",value:function(t,o){return"string"==typeof o?a.window.getComputedStyle(t).getPropertyValue(o):(o.transform&&l&&(o[l]=o.transform),Object.keys(o).forEach(function(e){t.style[e]=o[e]}),t)}},{key:"extend",value:function(o){var n=arguments;return o=o||{},Object.keys(arguments).forEach(function(t){n[t]&&Object.keys(n[t]).forEach(function(e){o[e]=n[t][e]})}),o}},{key:"getWindowData",value:function(){return{width:b,height:v,y:c}}},{key:"initImg",value:function(){var e=this,t=e.options.imgElement;return t&&"string"==typeof t&&(t=e.$item.querySelector(t)),t instanceof Element||(t=null),t&&(e.options.keepImg?e.image.$item=t.cloneNode(!0):(e.image.$item=t,e.image.$itemParent=t.parentNode),e.image.useImgTag=!0),!(!e.image.$item&&(null===e.image.src&&(e.image.src=e.css(e.$item,"background-image").replace(/^url\(['"]?/g,"").replace(/['"]?\)$/g,"")),!e.image.src||"none"===e.image.src))}},{key:"canInitParallax",value:function(){return l&&!this.options.disableParallax()}},{key:"init",value:function(){var e=this,t={position:"absolute",top:0,left:0,width:"100%",height:"100%",overflow:"hidden",pointerEvents:"none"},o={};if(!e.options.keepImg){var n=e.$item.getAttribute("style");if(n&&e.$item.setAttribute("data-jarallax-original-styles",n),e.image.useImgTag){var i=e.image.$item.getAttribute("style");i&&e.image.$item.setAttribute("data-jarallax-original-styles",i)}}if("static"===e.css(e.$item,"position")&&e.css(e.$item,{position:"relative"}),"auto"===e.css(e.$item,"z-index")&&e.css(e.$item,{zIndex:0}),e.image.$container=document.createElement("div"),e.css(e.image.$container,t),e.css(e.image.$container,{"z-index":e.options.zIndex}),s&&e.css(e.image.$container,{opacity:.9999}),e.image.$container.setAttribute("id","jarallax-container-"+e.instanceID),e.$item.appendChild(e.image.$container),e.image.useImgTag?o=e.extend({"object-fit":e.options.imgSize,"object-position":e.options.imgPosition,"font-family":"object-fit: "+e.options.imgSize+"; object-position: "+e.options.imgPosition+";","max-width":"none"},t,o):(e.image.$item=document.createElement("div"),e.image.src&&(o=e.extend({"background-position":e.options.imgPosition,"background-size":e.options.imgSize,"background-repeat":e.options.imgRepeat,"background-image":'url("'+e.image.src+'")'},t,o))),"opacity"!==e.options.type&&"scale"!==e.options.type&&"scale-opacity"!==e.options.type&&1!==e.options.speed||(e.image.position="absolute"),"fixed"===e.image.position)for(var a=0,r=e.$item;null!==r&&r!==document&&0===a;){var l=e.css(r,"-webkit-transform")||e.css(r,"-moz-transform")||e.css(r,"transform");l&&"none"!==l&&(a=1,e.image.position="absolute"),r=r.parentNode}o.position=e.image.position,e.css(e.image.$item,o),e.image.$container.appendChild(e.image.$item),e.onResize(),e.onScroll(!0),e.options.automaticResize&&x&&x.observe(e.$item),e.options.onInit&&e.options.onInit.call(e),"none"!==e.css(e.$item,"background-image")&&e.css(e.$item,{"background-image":"none"}),e.addToParallaxList()}},{key:"addToParallaxList",value:function(){y.push(this),1===y.length&&h()}},{key:"removeFromParallaxList",value:function(){var o=this;y.forEach(function(e,t){e.instanceID===o.instanceID&&y.splice(t,1)})}},{key:"destroy",value:function(){var e=this;e.removeFromParallaxList();var t=e.$item.getAttribute("data-jarallax-original-styles");if(e.$item.removeAttribute("data-jarallax-original-styles"),t?e.$item.setAttribute("style",t):e.$item.removeAttribute("style"),e.image.useImgTag){var o=e.image.$item.getAttribute("data-jarallax-original-styles");e.image.$item.removeAttribute("data-jarallax-original-styles"),o?e.image.$item.setAttribute("style",t):e.image.$item.removeAttribute("style"),e.image.$itemParent&&e.image.$itemParent.appendChild(e.image.$item)}e.$clipStyles&&e.$clipStyles.parentNode.removeChild(e.$clipStyles),e.image.$container&&e.image.$container.parentNode.removeChild(e.image.$container),e.options.onDestroy&&e.options.onDestroy.call(e),delete e.$item.jarallax}},{key:"clipContainer",value:function(){if("fixed"===this.image.position){var e=this,t=e.image.$container.getBoundingClientRect(),o=t.width,n=t.height;e.$clipStyles||(e.$clipStyles=document.createElement("style"),e.$clipStyles.setAttribute("type","text/css"),e.$clipStyles.setAttribute("id","jarallax-clip-"+e.instanceID),(document.head||document.getElementsByTagName("head")[0]).appendChild(e.$clipStyles));var i="#jarallax-container-"+e.instanceID+" {\n           clip: rect(0 "+o+"px "+n+"px 0);\n           clip: rect(0, "+o+"px, "+n+"px, 0);\n        }";e.$clipStyles.styleSheet?e.$clipStyles.styleSheet.cssText=i:e.$clipStyles.innerHTML=i}}},{key:"coverImage",value:function(){var e=this,t=e.image.$container.getBoundingClientRect(),o=t.height,n=e.options.speed,i="scroll"===e.options.type||"scroll-opacity"===e.options.type,a=0,r=o,l=0;return i&&(n<0?(a=n*Math.max(o,v),v<o&&(a-=n*(o-v))):a=n*(o+v),1<n?r=Math.abs(a-v):n<0?r=a/n+Math.abs(a):r+=(v-o)*(1-n),a/=2),e.parallaxScrollDistance=a,l=i?(v-r)/2:(o-r)/2,e.css(e.image.$item,{height:r+"px",marginTop:l+"px",left:"fixed"===e.image.position?t.left+"px":"0",width:t.width+"px"}),e.options.onCoverImage&&e.options.onCoverImage.call(e),{image:{height:r,marginTop:l},container:t}}},{key:"isVisible",value:function(){return this.isElementInViewport||!1}},{key:"onScroll",value:function(e){var t=this,o=t.$item.getBoundingClientRect(),n=o.top,i=o.height,a={},r=o;if(t.options.elementInViewport&&(r=t.options.elementInViewport.getBoundingClientRect()),t.isElementInViewport=0<=r.bottom&&0<=r.right&&r.top<=v&&r.left<=b,e||t.isElementInViewport){var l=Math.max(0,n),s=Math.max(0,i+n),c=Math.max(0,-n),u=Math.max(0,n+i-v),d=Math.max(0,i-(n+i-v)),p=Math.max(0,-n+v-i),m=1-2*(v-n)/(v+i),f=1;if(i<v?f=1-(c||u)/i:s<=v?f=s/v:d<=v&&(f=d/v),"opacity"!==t.options.type&&"scale-opacity"!==t.options.type&&"scroll-opacity"!==t.options.type||(a.transform="translate3d(0,0,0)",a.opacity=f),"scale"===t.options.type||"scale-opacity"===t.options.type){var y=1;t.options.speed<0?y-=t.options.speed*f:y+=t.options.speed*(1-f),a.transform="scale("+y+") translate3d(0,0,0)"}if("scroll"===t.options.type||"scroll-opacity"===t.options.type){var g=t.parallaxScrollDistance*m;"absolute"===t.image.position&&(g-=n),a.transform="translate3d(0,"+g+"px,0)"}t.css(t.image.$item,a),t.options.onScroll&&t.options.onScroll.call(t,{section:o,beforeTop:l,beforeTopEnd:s,afterTop:c,beforeBottom:u,beforeBottomEnd:d,afterBottom:p,visiblePercent:f,fromViewportCenter:m})}}},{key:"onResize",value:function(){this.coverImage(),this.clipContainer()}}]),j);function j(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,j);var o=this;o.instanceID=w++,o.$item=e,o.defaults={type:"scroll",speed:.5,imgSrc:null,imgElement:".jarallax-img",imgSize:"cover",imgPosition:"50% 50%",imgRepeat:"no-repeat",keepImg:!1,elementInViewport:null,zIndex:-100,disableParallax:!1,disableVideo:!1,automaticResize:!0,videoSrc:null,videoStartTime:0,videoEndTime:0,videoVolume:0,videoLoop:!0,videoPlayOnlyVisible:!0,onScroll:null,onInit:null,onDestroy:null,onCoverImage:null};var n=o.$item.getAttribute("data-jarallax"),i=JSON.parse(n||"{}");n&&console.warn("Detected usage of deprecated data-jarallax JSON options, you should use pure data-attribute options. See info here - https://github.com/nk-o/jarallax/issues/53");var a=o.$item.dataset||{},r={};if(Object.keys(a).forEach(function(e){var t=e.substr(0,1).toLowerCase()+e.substr(1);t&&void 0!==o.defaults[t]&&(r[t]=a[e])}),o.options=o.extend({},o.defaults,i,r,t),o.pureOptions=o.extend({},o.options),Object.keys(o.options).forEach(function(e){"true"===o.options[e]?o.options[e]=!0:"false"===o.options[e]&&(o.options[e]=!1)}),o.options.speed=Math.min(2,Math.max(-1,parseFloat(o.options.speed))),(o.options.noAndroid||o.options.noIos)&&(console.warn("Detected usage of deprecated noAndroid or noIos options, you should use disableParallax option. See info here - https://github.com/nk-o/jarallax/#disable-on-mobile-devices"),o.options.disableParallax||(o.options.noIos&&o.options.noAndroid?o.options.disableParallax=/iPad|iPhone|iPod|Android/:o.options.noIos?o.options.disableParallax=/iPad|iPhone|iPod/:o.options.noAndroid&&(o.options.disableParallax=/Android/))),"string"==typeof o.options.disableParallax&&(o.options.disableParallax=new RegExp(o.options.disableParallax)),o.options.disableParallax instanceof RegExp){var l=o.options.disableParallax;o.options.disableParallax=function(){return l.test(navigator.userAgent)}}if("function"!=typeof o.options.disableParallax&&(o.options.disableParallax=function(){return!1}),"string"==typeof o.options.disableVideo&&(o.options.disableVideo=new RegExp(o.options.disableVideo)),o.options.disableVideo instanceof RegExp){var s=o.options.disableVideo;o.options.disableVideo=function(){return s.test(navigator.userAgent)}}"function"!=typeof o.options.disableVideo&&(o.options.disableVideo=function(){return!1});var c=o.options.elementInViewport;c&&"object"===(void 0===c?"undefined":d(c))&&void 0!==c.length&&(c=u(c,1)[0]);c instanceof Element||(c=null),o.options.elementInViewport=c,o.image={src:o.options.imgSrc||null,$container:null,useImgTag:!1,position:/iPad|iPhone|iPod|Android/.test(navigator.userAgent)?"absolute":"fixed"},o.initImg()&&o.canInitParallax()&&o.init()}function S(e){("object"===("undefined"==typeof HTMLElement?"undefined":d(HTMLElement))?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":d(e))&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName)&&(e=[e]);for(var t=arguments[1],o=Array.prototype.slice.call(arguments,2),n=e.length,i=0,a=void 0;i<n;i++)if("object"===(void 0===t?"undefined":d(t))||void 0===t?e[i].jarallax||(e[i].jarallax=new $(e[i],t)):e[i].jarallax&&(a=e[i].jarallax[t].apply(e[i].jarallax,o)),void 0!==a)return a;return e}S.constructor=$,P.default=S}).call(this,E(5))},function(e,t,o){"use strict";var n=o(4),i=n.requestAnimationFrame||n.webkitRequestAnimationFrame||n.mozRequestAnimationFrame||function(e){var t=+new Date,o=Math.max(0,16-(t-a)),n=setTimeout(e,o);return a=t,n},a=+new Date;var r=n.cancelAnimationFrame||n.webkitCancelAnimationFrame||n.mozCancelAnimationFrame||clearTimeout;Function.prototype.bind&&(i=i.bind(n),r=r.bind(n)),(e.exports=i).cancel=r}]);
!function(n){var o={};function r(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=n,r.c=o,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";var o=r(n(2));function r(t){return t&&t.__esModule?t:{default:t}}(0,r(n(3)).default)(),(0,o.default)(function(){"undefined"!=typeof jarallax&&jarallax(document.querySelectorAll("[data-jarallax-element]"))})},function(t,e,n){"use strict";t.exports=function(t){"complete"===document.readyState||"interactive"===document.readyState?t.call():document.attachEvent?document.attachEvent("onreadystatechange",function(){"interactive"===document.readyState&&t.call()}):document.addEventListener&&document.addEventListener("DOMContentLoaded",t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:i.default.jarallax;if(void 0===t)return;var e=t.constructor;["initImg","canInitParallax","init","destroy","clipContainer","coverImage","isVisible","onScroll","onResize"].forEach(function(p){var f=e.prototype[p];e.prototype[p]=function(){var t=this,e=arguments||[];if("initImg"===p&&null!==t.$item.getAttribute("data-jarallax-element")&&(t.options.type="element",t.pureOptions.speed=t.$item.getAttribute("data-jarallax-element")||t.pureOptions.speed),"element"!==t.options.type)return f.apply(t,e);switch(t.pureOptions.threshold=t.$item.getAttribute("data-threshold")||"",p){case"init":var n=t.pureOptions.speed.split(" ");t.options.speed=t.pureOptions.speed||0,t.options.speedY=n[0]?parseFloat(n[0]):0,t.options.speedX=n[1]?parseFloat(n[1]):0;var o=t.pureOptions.threshold.split(" ");t.options.thresholdY=o[0]?parseFloat(o[0]):null,t.options.thresholdX=o[1]?parseFloat(o[1]):null;break;case"onResize":var r=t.css(t.$item,"transform");t.css(t.$item,{transform:""});var i=t.$item.getBoundingClientRect();t.itemData={width:i.width,height:i.height,y:i.top+t.getWindowData().y,x:i.left},t.css(t.$item,{transform:r});break;case"onScroll":var a=t.getWindowData(),s=(a.y+a.height/2-t.itemData.y-t.itemData.height/2)/(a.height/2),l=s*t.options.speedY,u=s*t.options.speedX,c=l,d=u;null!==t.options.thresholdY&&l>t.options.thresholdY&&(c=0),null!==t.options.thresholdX&&u>t.options.thresholdX&&(d=0),t.css(t.$item,{transform:"translate3d("+d+"px,"+c+"px,0)"});break;case"initImg":case"isVisible":case"clipContainer":case"coverImage":return!0}return f.apply(t,e)}})};var o,r=n(4),i=(o=r)&&o.__esModule?o:{default:o}},function(n,t,e){"use strict";(function(t){var e;e="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},n.exports=e}).call(this,e(5))},function(t,e,n){"use strict";var o,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};o=function(){return this}();try{o=o||Function("return this")()||(0,eval)("this")}catch(t){"object"===("undefined"==typeof window?"undefined":r(window))&&(o=window)}t.exports=o}]);
var CountUp=function(a,n,t,e,i,r){var l=this;if(l.version=function(){return"1.9.3"},l.options={useEasing:!0,useGrouping:!0,separator:",",decimal:".",easingFn:function(a,n,t,e){return t*(1-Math.pow(2,-10*a/e))*1024/1023+n},formattingFn:function(a){var n,t,e,i,r,o,s=a<0;if(a=Math.abs(a).toFixed(l.decimals),n=(a+="").split("."),t=n[0],e=1<n.length?l.options.decimal+n[1]:"",l.options.useGrouping){for(i="",r=0,o=t.length;r<o;++r)0!==r&&r%3==0&&(i=l.options.separator+i),i=t[o-r-1]+i;t=i}l.options.numerals.length&&(t=t.replace(/[0-9]/g,function(a){return l.options.numerals[+a]}),e=e.replace(/[0-9]/g,function(a){return l.options.numerals[+a]}));return(s?"-":"")+l.options.prefix+t+e+l.options.suffix},prefix:"",suffix:"",numerals:[]},r&&"object"==typeof r)for(var o in l.options)r.hasOwnProperty(o)&&null!==r[o]&&(l.options[o]=r[o]);""===l.options.separator?l.options.useGrouping=!1:l.options.separator=""+l.options.separator;for(var s=0,u=["webkit","moz","ms","o"],m=0;m<u.length&&!window.requestAnimationFrame;++m)window.requestAnimationFrame=window[u[m]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[u[m]+"CancelAnimationFrame"]||window[u[m]+"CancelRequestAnimationFrame"];function d(a){return"number"==typeof a&&!isNaN(a)}window.requestAnimationFrame||(window.requestAnimationFrame=function(a,n){var t=(new Date).getTime(),e=Math.max(0,16-(t-s)),i=window.setTimeout(function(){a(t+e)},e);return s=t+e,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),l.initialize=function(){return!!l.initialized||(l.error="",l.d="string"==typeof a?document.getElementById(a):a,l.d?(l.startVal=Number(n),l.endVal=Number(t),d(l.startVal)&&d(l.endVal)?(l.decimals=Math.max(0,e||0),l.dec=Math.pow(10,l.decimals),l.duration=1e3*Number(i)||2e3,l.countDown=l.startVal>l.endVal,l.frameVal=l.startVal,l.initialized=!0):(l.error="[CountUp] startVal ("+n+") or endVal ("+t+") is not a number",!1)):!(l.error="[CountUp] target is null or undefined"))},l.printValue=function(a){var n=l.options.formattingFn(a);"INPUT"===l.d.tagName?this.d.value=n:"text"===l.d.tagName||"tspan"===l.d.tagName?this.d.textContent=n:this.d.innerHTML=n},l.count=function(a){l.startTime||(l.startTime=a);var n=(l.timestamp=a)-l.startTime;l.remaining=l.duration-n,l.options.useEasing?l.countDown?l.frameVal=l.startVal-l.options.easingFn(n,0,l.startVal-l.endVal,l.duration):l.frameVal=l.options.easingFn(n,l.startVal,l.endVal-l.startVal,l.duration):l.countDown?l.frameVal=l.startVal-(l.startVal-l.endVal)*(n/l.duration):l.frameVal=l.startVal+(l.endVal-l.startVal)*(n/l.duration),l.countDown?l.frameVal=l.frameVal<l.endVal?l.endVal:l.frameVal:l.frameVal=l.frameVal>l.endVal?l.endVal:l.frameVal,l.frameVal=Math.round(l.frameVal*l.dec)/l.dec,l.printValue(l.frameVal),n<l.duration?l.rAF=requestAnimationFrame(l.count):l.callback&&l.callback()},l.start=function(a){l.initialize()&&(l.callback=a,l.rAF=requestAnimationFrame(l.count))},l.pauseResume=function(){l.paused?(l.paused=!1,delete l.startTime,l.duration=l.remaining,l.startVal=l.frameVal,requestAnimationFrame(l.count)):(l.paused=!0,cancelAnimationFrame(l.rAF))},l.reset=function(){l.paused=!1,delete l.startTime,l.initialized=!1,l.initialize()&&(cancelAnimationFrame(l.rAF),l.printValue(l.startVal))},l.update=function(a){l.initialize()&&(d(a=Number(a))?(l.error="",a!==l.frameVal&&(cancelAnimationFrame(l.rAF),l.paused=!1,delete l.startTime,l.startVal=l.frameVal,l.endVal=a,l.countDown=l.startVal>l.endVal,l.rAF=requestAnimationFrame(l.count))):l.error="[CountUp] update() - new endVal is not a number: "+a)},l.initialize()&&l.printValue(l.startVal)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
